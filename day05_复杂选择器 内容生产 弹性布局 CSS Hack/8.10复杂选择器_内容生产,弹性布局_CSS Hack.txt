一定位
 1.堆叠顺序
    一旦将元素变为已定位元素,元素们有可能出现堆叠的效果.
    如何改变堆叠顺序
    属性:z-index
    取值:无单位的数字,数字越大越靠上显示
    注意:
      1.父子元素间,z-index无效,永远都是子元素压在父元素上.
      2.只有已定位的元素才能使用z-index;
二. CSS3 Core(核心)
  1.复杂选择器
    1.兄弟选择器
      兄弟元素:具备相同父级元素的平级元素之间称为兄弟元素.
      ex:<div>
           <p></p>
           <p></p>
           <span></span>
           <a></a>
         </div>
      注意:兄弟选择器,只能向后找,不能向前找.
     1.相邻兄弟选择器
      作用:获取仅仅挨在某元素后的兄弟元素
      语法:选择器1+选择器2{}
     2.通用兄弟选择器
      作用:获取某元素后的所有满足条件的兄弟元素
      语法:选择器1~选择器2~{}
      练习:
     通过兄弟选择器设置如下样式:
       1.h3与div之间的间距为30px
          h3+div{}
       2.从第二个div开始,每个div之间的间距为10px;
          div~div{}
       <h3>静夜思</h3>
       <div>窗前明月光</div>      
       <div>疑是地上霜</div>
       <div>举头望明月</div>
       <div>低头思故乡</div>
     2.属性选择器
    id,class,name,type,value,style,title...
     1.作用:
      允许通过元素所附带的属性及其值来匹配元素
     2.语法
      1.基本语法
        [attr] attr表示任意属性
        作用:匹配页面中所有附带attr属性的元素
        ex:
        [id]匹配页面中所有附带id属性的元素
        [class]匹配页面中所有附带class属性的元素
      2.elem[attr]
        elem:表示元素
        attr:表示属性
        作用:匹配页面中所有附带attr属性的elem元素
        ex:
         div[id] 匹配页面中所有附带id属性的<div>元素
      3.[attr1][attr2]...
        作用:匹配同事附带多个属性的元素
        ex:
          p[id][class] 匹配id属性的和class属性的<p>元素 
      4.[attr=value]
        作用:匹配attr属性值为value的元素
        ex:
         [id="d1"] 匹配id值为d1的元素
         等同于:#d1
      5.[attr~=value] 用于选取属性值包含指定词汇的元素
        [attr^=value] 匹配属性值以指定值开头的每个元素
        [attr$=value] 匹配属性值以指定值结尾的每个元素
        [attr*=value] 匹配属性值包含指定值的每个元素
   3.伪类选择器
      已学过的伪类选择器:
        链接伪类:  :link
                   :visited
        动态伪类   :hover
                  :active
                  :focus
      1.目标伪类
        作用:突出显示活动的HTML锚点元素,匹配被激活的锚点
        语法:选择器:tatget{样式声明}
        ex:
          div:target{color:red}
      2.结构伪类
        作用:通过元素的结构关系匹配元素
        1.  :first-child
          匹配的元素是属于其父元素的第一个子元素
            <div>
              <p>p1</p>
              <p>p2</p>
              <p>p3</p>
              </div>
              ex:
                p:first-child{color:red;}
        2.  :last-child
        3. :nth-child(1)
           匹配的元素是属于其父元素中的第n个子元素,(n表示任意位置)
        练习:创建一个4行4列的表格,高宽各400px,内容随意
        通过结构伪类选择器设置第三列第二列的背景颜色为红色,字体大小为28px;
             tr:nth-child(3) td:nth-child(2){}
        4. :empty
          匹配没有子元素的元素
          ex:
            <div></div>
            <div> </div>
        5. :only-child 
          匹配的元素是属于其父元素唯一的子元素
           ex:
             P:only-child
             <div><p>唯一</p></div>
        6.否定伪类
          将满足指定选择器的元素给排除在外
           语法: :not(selector)
           练习:在表格的基础上 除第一列以外其他所有单元格的字体都为24px并且加粗和倾斜;
              td:not(:first-child){
               font:italic bold 24px "微软雅黑"
               }
   4.伪元素选择器
      1. :first-letter 或 ::first-letter
        作用:匹配某个元素的首字符
      2. :first-line 或 ::first-line
        作用:匹配某个元素的首行
        注意:如果首字符和首行样式冲突时,优先使用首字符样式.
      3. ::selection
        作用:匹配被用户选取的内容
        注意 :只能修改本文颜色和背景颜色
        练习:
          创建一个网页,页面添加一个div,id为d1,内容随意,将d1中首字符设置为
          加粗,红色,大小为20px,右外边距为15px,首行文本设置位橙色并倾斜显示,用户
          选取时文字颜色设置黄色,背景为红色
 2.内容生成
   1.什么是内容生成
     使用css动态的向某元素中插入一段内容
   2.伪元素选择器
     1.:before 或 ::before
       作用:匹配到某元素的内容区域之前
       <p>(:before)床前明月光</p>
     2.:after 或 ::after
       作用:匹配到某元素的内容区域之后
       <p>床前明月光(:after)</p>
    3.内容属性
      属性:content
      作用:向匹配到的位置处增加内容
      取值:
        1.字符串 将字符串用""引起来
        2.图片 url(图片路径)
       练习:<p>学而时习之,不亦说乎</p>
         <p>有朋自远方来,不亦乐乎</p>
        输出格式如下:
           子曰:学而时习之,不亦说乎 ---<摘自论语>
    4.解决问题
      1.浮动元素父元素高度的问题
        1.添加的子元素必须位于父元素的最后一个子元素的位置处.
          (::after)
        2.添加的必须是块级元素(display:block;)  
        3.添加的元素必须是空元素(content:"";)
        4.clear:both; 
           ex:     
        	.myclear::after{
	            display:block;
	            content:"";
	            clear:both;
	           } 
      2.子元素外边距溢出
        1.在父元素的第一个子元素位置处添加
        2.添加的是一个空的<table></table>标记(内容为空)
        练习:页面中设置一个子元素上外边距也出的效果,然后用内容溢出的方式解决;
           .my-margin::before{
                content:"";
                display:table;
           }
三.弹性布局(重点)
  1.什么是弹性布局?
    弹性布局是一种布局方式,主要解决某元素中子元素的布局方式,为布局提供最大的灵活性;
  2.弹性布局的相关概念
    1.弹性布局的容器
      要布局的子元素的父元素称为容器
    2.弹性布局的项目
      要布局的子元素称之为项目
    3.主轴
      项目们排列方向的一根轴,称之为主轴
      如果项目们按照横向排列,那么x轴是主轴
      如果项目们按照纵向排列,那么y轴是主轴
    4.交叉轴
      与主轴垂直相交的轴称之为交叉轴
  3.语法
    将元素变为弹性容器后,那么他所有的子元素讲变为弹性项目,都允许按照弹性布局的方式排列
    属性:display
    取值:
      1.flex :将块级元素变为容器
      2.inline-flex:将行内元素变为容器
    注意:
      1.元素设置为flex容器之后,子元素的float属性将失效;
      float/clear/vertical-align属性失效
      2.元素设置为flex容器之后,子元素允许修改尺寸;
      3.容器的text-align属性失效
  4.容器的属性
   1.flex-direction
     作用:指定容器的主轴及其排列方向
     取值:
       1.row  默认值,即主轴时x轴,起点在左端
       2.row-reverse 主轴x轴,起点在右端
       3.column  主轴是y轴 起点在顶端
       4.column-reverse 主轴是y轴,起点在底部
    2.flex-wrap
      作用:当一个主轴排列不下所有项目时,可以设置换行显示
      取值:
        1.nowrap 默认值,即控件不够时,也不换行,项目会自动缩小
        2.wrap 换行
        3.warp-reverse 换行并反转
    3.flex-flow
      作用:时flex-direction和flex-wrap的缩写
      取值:
        1.row nowrap 默认值
        2.direction wrap
    4.justify-content
      作用:定义项目上主轴上的对齐方式
      取值:
        1.flex-start 在主轴起点位置对齐
        2.flex-end  在主轴的终点对齐
        3.center    在主轴上居中对齐
        4.space-between 两端对齐
        5.space-around  两端保留子元素与子元素之间间距大小的一半


   

    
      